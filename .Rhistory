* la_x - Left ankle x-axis measurement (gravitation acceleration [g])
* la_y - Left ankle y-axis measurement (gravitation acceleration [g])
* la_z - Left ankle z-axis measurement (gravitation acceleration [g])
* ra_x - Right ankle x-axis measurement (gravitation acceleration [g])
* ra_y - Right ankle y-axis measurement (gravitation acceleration [g])
* ra_z - Right ankle z-axis measurement (gravitation acceleration [g])
2. `raw_accelerometry_data_dict.csv` - a CSV file containing the description of 14 variables that each file in the raw_accelerometry_data directory consists of.
3. `participant_demog.csv` - a CSV file with participants demographic information. The file contains 7 variables (column name in italics):
* subj_id - Participant ID (a character scalar). The value in this column can be matched with a file name (without ".csv" extension) of a file in raw_accelerometry_data directory.
* gender - Participant gender (a character scalar; one of: "male", "female").
* age - Participant age (an integer scalar).
* height_in - Participant height (an integer scalar; expressed in inches).
* weight_lbs - Participant weight (an integer scalar; expressed in pounds).
* race - Participant race (a character scalar; one of: "asian", "black", "caucasian").
* right_handed - Participant handedness (an integer scalar; 1 if right-handed, 0 otherwise).
All data are anonymized.
### Database location
- (Publishing in progress) [PhysioNet](https://physionet.org/) - platform that offers free access to large collections of physiological and clinical data and related open-source software. View on PhysioNet:
- Link: https://physionet.org/0lwpwmlC05r4ipGGsABVT9LH0xDEsJgMX6RzAngrKexY3y6yO0mnWfPjsKfEAj4r/
- Passphrase: `tmT6aiXgBz07VUnF1qIg` </br></br>
- (Available today) Personal Dropbox. Exaclty the same data and data structure as we submitted to PhysioNet, just zipped in one directory. See below instructions for downloading.
## Download data set from Dropbox location
```{r, message=FALSE}
library(data.table)
library(magrittr)
library(reshape2)
library(ggplot2)
library(latex2exp)
library(raster)
library(dplyr)
select <- dplyr::select; filter <- dplyr::filter; summarize <- dplyr::summarize
mutate <- dplyr::mutate
## Replace with your directory to the folder where data/IU_walking_driving_climbing.zip
## is/will be downloaded
wd <- "/Users/martakaras/Dropbox/_PROJECTS/WearableComputingShortCourse"
```
```{r}
wd_dat.dir <- file.path(wd, "data")
acc_dat.dir <- file.path(wd_dat.dir, "IU_walking_driving_climbing")
acc_dat.zip <- file.path(wd_dat.dir, "IU_walking_driving_climbing.zip")
acc_dat.zip.url <- "https://www.dropbox.com/s/pf5l2ki9t2ae2df/IU_walking_driving_climbing.zip?dl=1"
## Make data dir if does not exist yet
if (!dir.exists(wd_dat.dir)){
dir.create(wd_dat.dir)
}
## If files not downloaded yet, download (182.6 MB)
if (!dir.exists(acc_dat.dir) & !file.exists(acc_dat.zip)){
## Download .zip file
download.file(acc_dat.zip.url, acc_dat.zip)
## Unzip into data/ directory
unzip(acc_dat.zip, exdir = wd_dat.dir)
## Remove .zip file
file.remove(acc_dat.zip)
}
```
## Read data
### Demographic data
Read demographic data of all 32 participants
```{r}
fpath.demog <- file.path(acc_dat.dir, "participant_demog.csv")
df.demog <-  as.data.frame(fread(fpath.demog))
head(df.demog)
```
### Raw accelerometry data (for 1 participant)
What unzipped IU data dir contains?
```{r}
list.files(acc_dat.dir)
list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
```
Read raw accelerometry data of 1 study participant.
```{r}
IU_dat.raw.fnames <- list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
fname.i <- IU_dat.raw.fnames[1]
fpath.i <- file.path(acc_dat.dir, "raw_accelerometry_data", fname.i)
df.i <-  as.data.frame(fread(fpath.i))
head(df.i)
rm(list = ls())
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, cache = TRUE)
options(width = 100)
wd <- "/Users/martakaras/Dropbox/_PROJECTS/WearableComputingShortCourse"
```
# Introduction to raw accelerometry data
```{r out.width = "100%", echo = FALSE}
knitr::include_graphics(file.path(wd, "Rmd", "img_slides", "Intro to raw acc data.svg"))
```
*Above sensor images are sourced from respective vendors' websites.*
```{r out.width = "100%", echo = FALSE}
knitr::include_graphics(file.path(wd, "Rmd", "img_slides", "Intro to raw acc data (1).svg"))
```
*Above sensor images are sourced from respective vendors' websites.*
[movie](https://www.youtube.com/watch?v=irjG9Y4NGnE)
```{r out.width = "100%", echo = FALSE}
knitr::include_graphics(file.path(wd, "Rmd", "img_slides", "Intro to raw acc data (2).svg"))
knitr::include_graphics(file.path(wd, "Rmd", "img_slides", "Intro to raw acc data (3).svg"))
knitr::include_graphics(file.path(wd, "Rmd", "img_slides", "Intro to raw acc data (4).svg"))
```
# Class project raw accelerometry data set
## Data set description
### Overview
Raw accelerometry data collected during outdoor walking, stair climbing, and driving for 32 healthy adults.
- Accelerometry data were collected simultaneously at four body locations: left wrist, left hip, left ankle, and right ankle, at a sampling frequency of 100Hz (100 observations per second).
- The 3-axial ActiGraph GT3X+ devices were used to collect the data.
- The data include labels of activity type performed (walking, descending stairs, ascending stairs, driving, clapping) for each time point of data collection.
- Participants' demographic information is also included.
- All data are anonymized.
### Background
- Data were collected as a part of the study on Identification of Walking, Stair Climbing, and Driving Using Wearable Accelerometers, sponsored by the Indiana University CTSI grant and conducted at the Department of Biostatistics, Fairbanks School of Public Health at Indiana University.
- The study was led by Dr. Jaroslaw Harezlak, assisted by Drs. William Fadel and Jacek Urbanek.
- The study was approved by the Institutional Review Board of Indiana University; all participants provided written informed consent.
### Data collection methods
*The Methods description provided below is sourced from Reference [1] (Section: "2 Data Collection") except from one note referenced elsewhere.*
#### Study participants
- 32 healthy adults (13 men and 19 women) between 23 and 52 years of age participated in the study.
- 31 of the participants were right-handed.
#### Devices setup and placement
* Participants wore four 3-axial ActiGraph GT3X+ accelerometers: one on the left ankle, one on the right ankle, one on the left hip, and one on the left wrist.
* All four devices were synchronized to the same external clock. (In theory, this procedure should assure parallel measurement among devices; however, a subsecond-level desynchronization of the devices could have happened over time, see [3]: "3.8 Synchronization of Multiple PA Monitors".)
* For each device, the data collection frequency was set to 100 Hz (100 observations per second).
* Each device was attached using velcro bands. The ankle accelerometers were worn on the outside of the ankles. The wrist accelerometer was worn similar to a regular watch on the top of the left wrist. The hip accelerometer was attached to the belt of the participant on the left hip, but when a belt was not available, the device was either attached to the corresponding belt loop or clipped to the waistband.
#### Walking and driving trials
- The study included a walking trial (approximately 0.66 miles) followed by a driving trial (approximately 12.8 miles).
- The walking trial consisted of five periods of walking on level ground, six periods of descending stairs, and six periods of ascending stairs, and lasted a total between 9.0 and 13.5 min. The data collection protocol requested participants to walk at their usual pace along a predefined course to simulate free-living activities. The data from one participant included an additional period of walking on the level ground due to the participant briefly forgetting the instructions before turning around to ascend the stairs.
- Immediately after the walking period, participants were accompanied to their vehicle, and they then drove on a predefined route that included both highway and city driving. The driving trial lasted between 18 and 30 min, depending on traffic.
- In order to ensure accuracy of the starting and stopping times for different activities, participants were asked to clap three times at the beginning and end of each activity internally marking the raw accelerometry data for the wrist with three consecutive spikes in the signal. Those internal markings were used to accurately assign activity labels for each section of the protocol. Once the activity labels were assigned, the clapping signal +/-0.5 s of data was deleted to mimic smooth transitions between activities. Data were downloaded immediately following each participantâ€™s session.
### Database files guide
Database files contain:
1. `raw_accelerometry_data` - a directory with 32 data files in CSV format. Each file corresponds to raw accelerometry data measurements of 1 study participant. File names follow the convention: `"subj_id.csv"`. Each file contains 14 variables (column name in italics):
* activity - Type of activity (1=walking; 2=descending stairs; 3=ascending stairs; 4=driving; 77=clapping; 99=non-study activity)
* time_s - Time from device initiation (seconds [s])
* lw_x - Left wrist x-axis measurement (gravitation acceleration [g])
* lw_y - Left wrist y-axis measurement (gravitation acceleration [g])
* lw_z - Left wrist z-axis measurement (gravitation acceleration [g])
* lh_x - Left hip x-axis measurement (gravitation acceleration [g])
* lh_y - Left hip y-axis measurement (gravitation acceleration [g])
* lh_z - Left hip z-axis measurement (gravitation acceleration [g])
* la_x - Left ankle x-axis measurement (gravitation acceleration [g])
* la_y - Left ankle y-axis measurement (gravitation acceleration [g])
* la_z - Left ankle z-axis measurement (gravitation acceleration [g])
* ra_x - Right ankle x-axis measurement (gravitation acceleration [g])
* ra_y - Right ankle y-axis measurement (gravitation acceleration [g])
* ra_z - Right ankle z-axis measurement (gravitation acceleration [g])
2. `raw_accelerometry_data_dict.csv` - a CSV file containing the description of 14 variables that each file in the raw_accelerometry_data directory consists of.
3. `participant_demog.csv` - a CSV file with participants demographic information. The file contains 7 variables (column name in italics):
* subj_id - Participant ID (a character scalar). The value in this column can be matched with a file name (without ".csv" extension) of a file in raw_accelerometry_data directory.
* gender - Participant gender (a character scalar; one of: "male", "female").
* age - Participant age (an integer scalar).
* height_in - Participant height (an integer scalar; expressed in inches).
* weight_lbs - Participant weight (an integer scalar; expressed in pounds).
* race - Participant race (a character scalar; one of: "asian", "black", "caucasian").
* right_handed - Participant handedness (an integer scalar; 1 if right-handed, 0 otherwise).
All data are anonymized.
### Database location
- (Publishing in progress) [PhysioNet](https://physionet.org/) - platform that offers free access to large collections of physiological and clinical data and related open-source software. View on PhysioNet:
- Link: https://physionet.org/0lwpwmlC05r4ipGGsABVT9LH0xDEsJgMX6RzAngrKexY3y6yO0mnWfPjsKfEAj4r/
- Passphrase: `tmT6aiXgBz07VUnF1qIg` </br></br>
- (Available today) Personal Dropbox. Exaclty the same data and data structure as we submitted to PhysioNet, just zipped in one directory. See below instructions for downloading.
## Download data set from Dropbox location
```{r, message=FALSE}
library(data.table)
library(magrittr)
library(reshape2)
library(ggplot2)
library(latex2exp)
library(raster)
library(dplyr)
select <- dplyr::select; filter <- dplyr::filter; summarize <- dplyr::summarize
mutate <- dplyr::mutate
## Replace with your directory to the folder where data/IU_walking_driving_climbing.zip
## is/will be downloaded
wd <- "/Users/martakaras/Dropbox/_PROJECTS/WearableComputingShortCourse"
```
```{r}
wd_dat.dir <- file.path(wd, "data")
acc_dat.dir <- file.path(wd_dat.dir, "IU_walking_driving_climbing")
acc_dat.zip <- file.path(wd_dat.dir, "IU_walking_driving_climbing.zip")
acc_dat.zip.url <- "https://www.dropbox.com/s/pf5l2ki9t2ae2df/IU_walking_driving_climbing.zip?dl=1"
## Make data dir if does not exist yet
if (!dir.exists(wd_dat.dir)){
dir.create(wd_dat.dir)
}
## If files not downloaded yet, download (182.6 MB)
if (!dir.exists(acc_dat.dir) & !file.exists(acc_dat.zip)){
## Download .zip file
download.file(acc_dat.zip.url, acc_dat.zip)
## Unzip into data/ directory
unzip(acc_dat.zip, exdir = wd_dat.dir)
## Remove .zip file
file.remove(acc_dat.zip)
}
```
## Read data
### Demographic data
Read demographic data of all 32 participants
```{r}
fpath.demog <- file.path(acc_dat.dir, "participant_demog.csv")
df.demog <-  as.data.frame(fread(fpath.demog))
head(df.demog)
```
### Raw accelerometry data (for 1 participant)
What unzipped IU data dir contains?
```{r}
list.files(acc_dat.dir)
list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
```
Read raw accelerometry data of 1 study participant.
```{r}
IU_dat.raw.fnames <- list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
fname.i <- IU_dat.raw.fnames[1]
fpath.i <- file.path(acc_dat.dir, "raw_accelerometry_data", fname.i)
df.i <-  as.data.frame(fread(fpath.i))
head(df.i)
IU_dat.raw.fnames <- list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
fname.i <- IU_dat.raw.fnames[1]
fpath.i <- file.path(acc_dat.dir, "raw_accelerometry_data", fname.i)
df.i <-  as.data.frame(fread(fpath.i))
head(df.i)
IU_dat.raw.fnames <- list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
fname.i <- IU_dat.raw.fnames[1]
fpath.i <- file.path(acc_dat.dir, "raw_accelerometry_data", fname.i)
df.i <-  as.data.frame(fread(fpath.i))
head(df.i)
wd_dat.dir <- file.path(wd, "data")
acc_dat.dir <- file.path(wd_dat.dir, "IU_walking_driving_climbing")
acc_dat.zip <- file.path(wd_dat.dir, "IU_walking_driving_climbing.zip")
acc_dat.zip.url <- "https://www.dropbox.com/s/pf5l2ki9t2ae2df/IU_walking_driving_climbing.zip?dl=1"
## Make data dir if does not exist yet
if (!dir.exists(wd_dat.dir)){
dir.create(wd_dat.dir)
}
## If files not downloaded yet, download (182.6 MB)
if (!dir.exists(acc_dat.dir) & !file.exists(acc_dat.zip)){
## Download .zip file
download.file(acc_dat.zip.url, acc_dat.zip)
## Unzip into data/ directory
unzip(acc_dat.zip, exdir = wd_dat.dir)
## Remove .zip file
file.remove(acc_dat.zip)
}
fpath.demog <- file.path(acc_dat.dir, "participant_demog.csv")
df.demog <-  as.data.frame(fread(fpath.demog))
head(df.demog)
library(data.table)
library(magrittr)
library(reshape2)
library(ggplot2)
library(latex2exp)
library(raster)
library(dplyr)
select <- dplyr::select; filter <- dplyr::filter; summarize <- dplyr::summarize
mutate <- dplyr::mutate
## Replace with your directory to the folder where data/IU_walking_driving_climbing.zip
## is/will be downloaded
wd <- "/Users/martakaras/Dropbox/_PROJECTS/WearableComputingShortCourse"
wd_dat.dir <- file.path(wd, "data")
acc_dat.dir <- file.path(wd_dat.dir, "IU_walking_driving_climbing")
acc_dat.zip <- file.path(wd_dat.dir, "IU_walking_driving_climbing.zip")
acc_dat.zip.url <- "https://www.dropbox.com/s/pf5l2ki9t2ae2df/IU_walking_driving_climbing.zip?dl=1"
## Make data dir if does not exist yet
if (!dir.exists(wd_dat.dir)){
dir.create(wd_dat.dir)
}
## If files not downloaded yet, download (182.6 MB)
if (!dir.exists(acc_dat.dir) & !file.exists(acc_dat.zip)){
## Download .zip file
download.file(acc_dat.zip.url, acc_dat.zip)
## Unzip into data/ directory
unzip(acc_dat.zip, exdir = wd_dat.dir)
## Remove .zip file
file.remove(acc_dat.zip)
}
```{r}
fpath.demog <- file.path(acc_dat.dir, "participant_demog.csv")
df.demog <-  as.data.frame(fread(fpath.demog))
head(df.demog)
```
list.files(acc_dat.dir)
list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
```{r}
IU_dat.raw.fnames <- list.files(file.path(acc_dat.dir, "raw_accelerometry_data"))
fname.i <- IU_dat.raw.fnames[1]
fpath.i <- file.path(acc_dat.dir, "raw_accelerometry_data", fname.i)
df.i <-  as.data.frame(fread(fpath.i))
head(df.i)
```{r}
map_vec <- rep(NA, 99)
map_vec[c(1,2,3,4,77,99)] <- c("walking", "descending_stairs",  "ascending_stairs",
"driving", "clapping", "non_study_activity")
df.i$activity_lab <- map_vec[df.i$activity]
table(df.i$activity_lab)
hz <- 100
## How many minutes of data colleciton total?
round(nrow(df.i) / (hz * 60), 2)
## How many minutes of data for each activity?
round(table(df.i$activity_lab) / (hz * 60), 2)
df.lw <- df.i %>%
select(activity_lab, time_s, x = lw_x, y = lw_y, z = lw_z) %>%
mutate(loc_id = "left_wrist")
df.lh <- df.i %>%
select(activity_lab, time_s, x = lh_x, y = lh_y, z = lh_z) %>%
mutate(loc_id = "left_hip")
df.la <- df.i %>%
select(activity_lab, time_s, x = la_x, y = la_y, z = la_z) %>%
mutate(loc_id = "left_ankle")
df.ra <- df.i %>%
select(activity_lab, time_s, x = ra_x, y = ra_y, z = ra_z) %>%
mutate(loc_id = "right_ankle")
df.all <- rbind(df.lw, df.lh, df.la, df.ra)
rm(df.lw, df.lh, df.la, df.ra, df.i)
head(df.all)
loc_id.level <- c("left_wrist", "left_hip", "left_ankle", "right_ankle")
activity_lab.level <- c("non_study_activity", "driving", "clapping", "walking",
"ascending_stairs", "descending_stairs")
plt.df <-
df.all %>%
filter(activity_lab == "walking") %>%
group_by(loc_id) %>%
mutate(time_s_act = row_number(time_s) / 100) %>%
filter(time_s_act >= 0, time_s_act <= 10) %>%
select(-time_s, -activity_lab) %>%
reshape2::melt(id.vars = c("time_s_act", "loc_id")) %>%
mutate(loc_id = factor(loc_id, levels = loc_id.level))
ggplot(plt.df, aes(x = time_s_act, y = value, color = variable)) +
geom_line() +
facet_grid(loc_id ~ .) +
labs(color = "Sensor\naxis", y = TeX("Acceleration measurement \\[\\textit{g}\\]"), x = "Exercise time [s]")
loc_id.level <- c("left_wrist", "left_hip", "left_ankle", "right_ankle")
activity_lab.level <- c("non_study_activity", "driving", "clapping", "walking",
"ascending_stairs", "descending_stairs")
plt.df <-
df.all %>%
filter(activity_lab == "walking", loc_id == "left_wrist") %>%
group_by(loc_id) %>%
mutate(time_s_act = row_number(time_s) / 100) %>%
filter(time_s_act >= 0, time_s_act <= 10) %>%
select(-time_s, -activity_lab) %>%
reshape2::melt(id.vars = c("time_s_act", "loc_id")) %>%
mutate(loc_id = factor(loc_id, levels = loc_id.level))
ggplot(plt.df, aes(x = time_s_act, y = value, color = variable)) +
geom_line() +
facet_grid(loc_id ~ .) +
labs(color = "Sensor\naxis", y = TeX("Acceleration measurement \\[\\textit{g}\\]"), x = "Exercise time [s]")
loc_id.level <- c("left_wrist", "left_hip", "left_ankle", "right_ankle")
activity_lab.level <- c("non_study_activity", "driving", "clapping", "walking",
"ascending_stairs", "descending_stairs")
plt.df <-
df.all %>%
filter(activity_lab == "walking", loc_id == "left_wrist") %>%
group_by(loc_id) %>%
mutate(time_s_act = row_number(time_s) / 100) %>%
filter(5) %>%
select(-time_s, -activity_lab) %>%
reshape2::melt(id.vars = c("time_s_act", "loc_id")) %>%
mutate(loc_id = factor(loc_id, levels = loc_id.level))
ggplot(plt.df, aes(x = time_s_act, y = value, color = variable)) +
geom_line() +
facet_grid(loc_id ~ .) +
labs(color = "Sensor\naxis", y = TeX("Acceleration measurement \\[\\textit{g}\\]"), x = "Exercise time [s]")
df.all %>%
filter(activity_lab == "walking", loc_id == "left_wrist") %>%
group_by(loc_id) %>%
mutate(time_s_act = row_number(time_s) / 100) %>%
filter(5) %>%
select(-time_s, -activity_lab) %>%
reshape2::melt(id.vars = c("time_s_act", "loc_id")) %>%
mutate(loc_id = factor(loc_id, levels = loc_id.level)) +
theme(legend.position = "top")
loc_id.level <- c("left_wrist", "left_hip", "left_ankle", "right_ankle")
activity_lab.level <- c("non_study_activity", "driving", "clapping", "walking",
"ascending_stairs", "descending_stairs")
plt.df <-
df.all %>%
filter(activity_lab == "walking", loc_id == "left_wrist") %>%
group_by(loc_id) %>%
mutate(time_s_act = row_number(time_s) / 100) %>%
filter(5) %>%
select(-time_s, -activity_lab) %>%
reshape2::melt(id.vars = c("time_s_act", "loc_id")) %>%
mutate(loc_id = factor(loc_id, levels = loc_id.level)) +
theme(legend.position = "top")
ggplot(plt.df, aes(x = time_s_act, y = value, color = variable)) +
geom_line() +
facet_grid(loc_id ~ .) +
labs(color = "Sensor\naxis", y = TeX("Acceleration measurement \\[\\textit{g}\\]"), x = "Exercise time [s]")
ggplot(plt.df, aes(x = time_s_act, y = value, color = variable)) +
geom_line() +
facet_grid(loc_id ~ .) +
labs(color = "Sensor\naxis", y = TeX("Acceleration measurement \\[\\textit{g}\\]"), x = "Exercise time [s]") +
theme(legend.position = "top")
#' @author
#' Marta Karas <marta.karass@gmail.com>
#'
#' @description
#' Build rnn model to classify study participant (out of 32 total) based on
#' 5-long seconds of accelerometry data.
#'
#' Inspired by:
#' https://blog.goodaudience.com/introduction-to-1d-convolutional-neural-networks-in-keras-for-time-sequences-3a7ff801a2cf
rm(list = ls())
project.dir   <- "/Users/martakaras/Dropbox/JHU-coursework/PH-140-850-Wearables-Computing/class-project/"
library(adeptdata)
library(keras)
library(ggplot2)
library(reshape2)
library(dplyr)
## -----------------------------------------------------------------------------
## PREPARE DATA
## - Use raw walking accelerometry data from acc_walking_IU package
##   (subset of the study on Identification of Walking, Stair Climbing, and
##   Driving Using Wearable Accelerometers)
## - Discard 1st few seconds of walking data
## - Compute vector magnitude (VM)
## - Subset location to "left ankle"
## - Define single X data observation to be 5 second-long vector of VM values
## - Extract same number of single data observations per study participant
## Param
win_s <- 5
win_vl <- 100 * win_s
subj_n <- length(unique(acc_walking_IU$subj_id))
## Filter, mutate accelerometry data frame
acc_f <-
acc_walking_IU %>%
filter(loc_id == "left_wrist") %>%
filter(time_s > 5) %>%
group_by(subj_id) %>%
arrange(subj_id, time_s) %>%
mutate(rn = row_number(),
vm = sqrt(x^2 + y^2 + z^2))
## Number of VM values we use per each participant
rn_upper_bound <- acc_f %>% group_by(subj_id) %>% summarize(rn_max = max(rn)) %>%
pull() %>% min()
rn_upper_bound <- rn_upper_bound - rn_upper_bound %% win_vl
## Number of single X data observations we get per each participant
obs_per_subj <- rn_upper_bound / win_vl
## X data
X_all <-
acc_f %>%
filter(rn <= rn_upper_bound) %>%
group_by(subj_id) %>%
arrange(subj_id, rn) %>%
group_map(~ do.call(rbind, split(.$vm, ceiling(.$rn/win_vl))))
X_all <- do.call(rbind, X_all)
## Y data
Y_all <- as.vector(sapply(seq(0, by = 1, length.out = subj_n), function(x) rep(x, obs_per_subj)))
## -----------------------------------------------------------------------------
## BUILD AND PREDICT WITH CONVOLUTIONAL (1D) NEURAL NETWORK
## Split into train and test set
train_pct <- 0.7
X_all_nrow <- nrow(X_all)
train_size_per_subj <- round(obs_per_subj * train_pct)
train_size_per_subj
train_size_per_subj * 32
960 - 672
install.packages("actigraphy")
devtools::install_github("junruidi/actigraphy")
library(actigraphy)
data(example_activity_data)
count = example_activity_data$count
weartime = wear_flag(count.data = count, start = "06:00", end = "23:00")
data(example_activity_data)
count1 = c(t(example_activity_data$count[1,-c(1,2)]))
wear1 = c(t(example_activity_data$wear[1,-c(1,2)]))
id = example_activity_data$count$ID[1]
day= example_activity_data$count$Day[1]
plot_profile(x=count1, w=wear1, title = paste0("ID ",id, ", Day  ", day),cex.main = 1.3,cex.lab = 1.2, cex.xaxis = 1,cex.yaxis = 1,hr = 2)
data(example_activity_data)
count = example_activity_data$count
wear = example_activity_data$wear
tac = Tvol(count.data = count,weartime = wear,logtransform = FALSE)
tlac = Tvol(count.data = count,weartime = wear,logtransform = TRUE)
data(example_activity_data)
count1 = c(t(example_activity_data$count[1,-c(1,2)]))
wear1 = c(t(example_activity_data$wear[1,-c(1,2)]))
tst = Time(x = count1, w = wear1, thresh = 100,smallerthan = TRUE)
tat = Time(x = count1, w = wear1, thresh = 100,smallerthan = FALSE)
data(example_activity_data)
count = example_activity_data$count
wear = example_activity_data$wear
sed_all = Time_long(count.data = count,weartime = wear,
thresh = 100,smallerthan = TRUE)
data(example_activity_data)
count1 = c(t(example_activity_data$count[1,-c(1,2)]))
wear1 = c(t(example_activity_data$wear[1,-c(1,2)]))
mb = fragmentation(x = count1, w = wear1, thresh = 100, metrics = "mean_bout")
tp = fragmentation(x = count1, w = wear1, thresh = 100, metrics = "TP")
data(example_activity_data)
count = example_activity_data$count
wear = example_activity_data$wear
frag_by_subject = fragmentation_long(count.data = count, weartime = wear,thresh = 100, metrics = "all",by = "subject")
frag_by_day = fragmentation_long(count.data = count, weartime = wear,thresh = 100, metrics = "all",by = "day")
count.days.simu = rpois(1440*5, lambda = 5)
extcos = ExtCos(x = count.days.simu, logtransform  = TRUE)
data(example_activity_data)
count.data = example_activity_data$count
extcos = ExtCos_long(count.data = count.data, logtransform  = TRUE)
data(example_activity_data)
count1 = c(t(example_activity_data$count[1,-c(1,2)]))
iv = IV(x = count1, level = "hour")
data(example_activity_data)
count.data = example_activity_data$count
iv_all = IV_long(count.data = count.data, level = "hour")
data(example_activity_data)
count.data = example_activity_data$count
fpca = crfpca(count.data = count, knots = 20, pve = 0.9, logtransform  = TRUE)
scores = fpca$pcs
eignfunction = fpca$phi
install.packages("refund")
library(refund)
data(example_activity_data)
count.data = example_activity_data$count
fpca = crfpca(count.data = count, knots = 20, pve = 0.9, logtransform  = TRUE)
scores = fpca$pcs
eignfunction = fpca$phi
